from tkinter import *
import time

root = Tk()
canv = Canvas(root, width=700, height=700)
canv.pack()
x, y = 150, 150
vxp, vyp = 1, 0
xg, yg = 100, 100
vxg,vyg = 0,0
grid = 30
nvxp, nvyp = 0,0
matr = []
i,j = 0,0
pos_matri = []
pr,pd,pl,pu = 0,0,0,0


def shortest_route_count():
    global pos_matri,xp,yp,xg,yg

    ip, jp = return_pos_pac(xp, yp)
    queue = [[ip,jp]]
    while len(queue)>0 and i != ip and j != jp:
        i,j = queue.pop(0)


def field_read():
    global x,y,grid,xp,yp,matr,i,j,pos_matri
    a = open('field.txt', 'r')
    f = True
    for line in a:
        for symb in line:

            if f:
                matr.append([symb])
            else:
                matr[i].append(symb)

            #if symb != '\n':
                #matr[j].append(symb)
            #if symb == '1':
                #   canv.create_rectangle(i*grid, j*grid, (i+1)*grid, (j+1)*grid, fill="blue", tag = 'solid')
            #if symb == '9':
            #     xp = i*grid
            #     yp = j*grid
            #     draw_pac()
            i += 1

        f = False
        i = 0
        j += 1
    j = 0
    i = 0
    pos_matri = matr.copy()

    canv.update()
    a.close()

def field_draw():
    global pos_matri,xp,yp,i,j,grid
    for x in pos_matri:
        for symb in x:
            if symb == '1':
                canv.create_rectangle(i * grid, j * grid, (i + 1) * grid, (j + 1) * grid, fill="blue", tag='solid')
                pos_matri[i][j] = '-1'
            if symb == '0':
                pos_matri[i][j] = '-2'
            if symb == '9':
                xp = i * grid
                yp = j * grid
                draw_pac(xp,yp)
            j += 1
        j = 0
        i+=1


def return_pos_ghost(xg,yg):
    ig = (xg + 15) // grid
    jg = (yg + 15) // grid
    return ig, jg


def return_pos_pac(xp, yp):
    ip = (xp+15)//grid
    jp = (yp + 15) // grid
    return ip,jp

def if_game_over():
    global xg, yg, xp, yp
    if xp-5<=xg<=xp+5 and yp-5<=yg<=yp+5:
        return 1
    else:
        return 0


def game_over():
    global xg,yg,xp,yp
    canv.delete('all')
    canv.create_text(200, 250, text="GAME OVER",
                font="Verdana 40", anchor="w", justify=CENTER, fill="red")
    canv.update()

def draw_field():
    global x, y
    canv.create_rectangle(0, 0, 500, 500, fill="white", outline="black")


def draw_pac(xp,yp):
    canv.delete('pacman')
    canv.create_oval(xp, yp, xp + 30, yp + 30, fill='yellow', tag='pacman')


def draw_ghost(color):
    global xg, yg
    canv.delete('ghost')
    canv.create_arc([xg, yg], [xg + 30, yg + 30], start=0, extent=180,
                    style=CHORD,fill =color , outline=color, width=2, tag='ghost')
    canv.create_rectangle(xg, yg+15, xg+30, yg+20, fill=color, outline=color, tag='ghost')
    canv.create_polygon([xg, yg+20], [xg+10, yg+20], [xg+5, yg+30], fill=color, tag='ghost')
    canv.create_polygon([xg+10, yg + 20], [xg + 20, yg + 20], [xg + 15, yg + 30], fill=color, tag='ghost')
    canv.create_polygon([xg+20, yg + 20], [xg + 31, yg + 20], [xg + 25, yg + 30], fill=color, tag='ghost')
    eyebx = xg+5
    eyeby = yg+5
    canv.create_oval([eyebx-1, eyeby], [eyebx+9, eyeby+10], fill="white", tag='ghost')
    canv.create_oval([eyebx+11, eyeby], [eyebx + 21, eyeby + 10], fill="white", tag='ghost')




def draw():
    global x, y,xp,yp
    draw_pac(xp,yp)
    #draw_ghost('green')
    canv.update()


def moveleft(event):
    global nvxp, nvyp,pl
    pl = 1
    while pl==1:
        if if_cant_left(xp, yp, -1):
            pl = 1
        nvxp = -1
        nvyp = 0
        pl = 0


def moveright(event):
    global nvxp, nvyp
    if if_cant_right(xp, yp, 1):
        return
    nvxp = 1
    nvyp = 0


def moveup(event):
    global nvxp, nvyp
    if if_cant_up(xp, yp, -1):
        return
    nvyp = -1
    nvxp = 0


def movedown(event):
    global nvxp,nvyp
    if if_cant_down(xp, yp, 1):
        return
    nvyp = 1
    nvxp = 0

def moveghost():
    global xp,yp,xg,yg,vxg,vyg
    if xp > xg:
        vxg = 1
        vyg = 0
    elif xp < xg:
        vxg = -1
        vyg = 0
    else:
        if yp > yg:
            vyg = 1
            vxg = 0
        if yp < yg:
            vyg = -1
            vxg = 0
    xg+=vxg
    yg+=vyg


def if_cant_right(xp, yp, nvxp):
    ip, jp = return_pos_pac(xp, yp)
    return nvxp > 0 and ip+1 < len(matr) and matr[ip+1][jp] == '-1'


def if_cant_left(xp, yp, nvxp):
    ip, jp = return_pos_pac(xp, yp)
    return nvxp < 0 and ip>=1 and matr[ip-1][jp] == '-1'


def if_cant_up(xp, yp, nvyp):
    ip, jp = return_pos_pac(xp, yp)
    return nvyp < 0 and jp>=1 and matr[ip][jp-1] == '-1'


def if_cant_down(xp, yp, nvyp):
    ip, jp = return_pos_pac(xp, yp)
    return nvyp > 0 and jp+1 < len(matr[jp]) and matr[ip][jp+1]=='-1'


def move_pacman():
    global xp, yp, vxp, vyp, i, j, matr, grid, nvxp, nvyp
    if (xp+15-grid//2)%grid == 0 and (yp+15-grid//2)%grid == 0:
        if if_cant_right(xp, yp, nvxp):
            nvxp = 0
        if if_cant_left(xp, yp, nvxp):
            nvxp = 0
        if if_cant_up(xp, yp, nvyp):
            nvyp = 0
        if if_cant_down(xp, yp, nvyp):
            nvyp = 0
        vxp = nvxp
        vyp = nvyp

    if yp - 15 < 0:
        yp += 500
    if yp + 15 > 500:
        yp -= 500
    if xp - 15 < 0:
        xp += 500
    if xp + 15 > 500:
        xp -= 500
    xp += vxp
    yp += vyp

field_read()
field_draw()
print(matr)
root.bind('<a>', moveleft)
root.bind('<d>', moveright)
root.bind('<w>', moveup)
root.bind('<s>', movedown)
draw()
while 1:
    move_pacman()
   # moveghost()
    if if_game_over():
        game_over()
        break
    draw()
    time.sleep(.01)

root.mainloop()
